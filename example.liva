// Ejemplo básico de Liva para probar la extensión

// Función principal
main() {
    // Variables
    let nombre = "Mundo"
    const saludo = "¡Hola"

    // String template
    print($"{saludo} {nombre}!")

    // Arrays
    let numeros = [1, 2, 3, 4, 5]

    // For loop secuencial
    print("\nLoop secuencial:")
    for seq x in numeros {
        print($"Seq: {x}")
    }

    // For loop paralelo
    print("\nLoop paralelo:")
    for par x in numeros {
        print($"Par: {x}")
    }

    // For loop vectorizado
    print("\nLoop vectorizado:")
    for vec x in numeros {
        print($"Vec: {x}")
    }

    // For loop paralelo vectorizado (SIMD)
    print("\nLoop paralelo vectorizado:")
    for parvec x in numeros with simdWidth 4 {
        print($"ParVec: {x}")
    }

    // For loop con opciones
    for par x in numeros with chunk 2 threads 4 {
        print($"Processing {x}")
    }

    print("\n¡Ejemplo completado!")
}

// Función de utilidad
saludar(nombre: string) => $"¡Hola, {nombre}!"

// ============================================================================
// CLASES
// ============================================================================

// Basic class
Person {
    constructor(nombre: string, edad: int) {
        this.nombre = nombre
        this.edad = edad
    }

    nombre: string
    edad: int

    // Methods
    greet() => $"¡Hola!"
    introduce() => $"Soy {this.nombre} y tengo {this.edad} años"
    esAdulto() => this.edad >= 18
}

// Class with private fields
BankAccount {
    constructor(balance: number) {
        this.__balance = balance
    }
    
    __balance: number  // Private
    
    deposit(amount: number) {
        this.__balance = this.__balance + amount
    }
    
    getBalance() => this.__balance
}

// ============================================================================
// INTERFACES (Future feature - syntax documented)
// ============================================================================

// NOTE: Interface syntax for future implementation:
// 
// Greetable {
//     greet(): string
//     introduce(): string
// }
// 
// Person : Greetable {
//     // ... implements interface
// }

// Función con concurrencia
procesarDatos() {
    let datos = [1, 2, 3, 4, 5]
    
    // Ejecutar de forma asíncrona
    let resultado = async calcular(datos)
    print($"Resultado: {resultado}")
    
    // Ejecutar en paralelo
    let paralelo = par procesarHeavy(datos)
    print($"Procesado: {paralelo}")
}
