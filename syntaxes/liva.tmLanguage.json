{
    "$schema": "https://raw.githubusercontent.com/martinring/tmgram/main/tmgram.schema.json",
    "name": "Liva",
    "scopeName": "source.liva",
    "fileTypes": [".liva"],
    "patterns": [
        {
            "include": "#comments"
        },
        {
            "include": "#strings"
        },
        {
            "include": "#literals"
        },
        {
            "include": "#keywords"
        },
        {
            "include": "#types"
        },
        {
            "include": "#identifiers"
        },
        {
            "include": "#operators"
        },
        {
            "include": "#punctuation"
        }
    ],
    "repository": {
        "comments": {
            "patterns": [
                {
                    "name": "comment.line.double-slash.liva",
                    "match": "//.*$"
                },
                {
                    "name": "comment.block.liva",
                    "begin": "/\\*",
                    "end": "\\*/"
                }
            ]
        },
        "strings": {
            "patterns": [
                {
                    "name": "string.quoted.double.liva",
                    "begin": "\"",
                    "end": "\"",
                    "patterns": [
                        {
                            "name": "constant.character.escape.liva",
                            "match": "\\\\."
                        }
                    ]
                },
                {
                    "name": "string.quoted.single.liva",
                    "begin": "'",
                    "end": "'",
                    "patterns": [
                        {
                            "name": "constant.character.escape.liva",
                            "match": "\\\\."
                        }
                    ]
                }
            ]
        },
        "literals": {
            "patterns": [
                {
                    "name": "constant.numeric.integer.liva",
                    "match": "\\b\\d[\\d_]*\\b"
                },
                {
                    "name": "constant.numeric.float.liva",
                    "match": "\\b\\d[\\d_]*\\.\\d[\\d_]*\\b"
                },
                {
                    "name": "constant.language.boolean.liva",
                    "match": "\\b(true|false)\\b"
                }
            ]
        },
        "keywords": {
            "patterns": [
                {
                    "name": "keyword.control.liva",
                    "match": "\\b(let|const|import|use|rust|type|test|if|else|while|for|in|switch|case|default|throw|try|catch|return|async|await|parallel|par|task|fire|move|seq|vec|boost|with|ordered|chunk|threads|simdWidth|prefetch|reduction|schedule|detect|auto|safe|fast|static|dynamic|as)\\b"
                },
                {
                    "name": "keyword.operator.logical.liva",
                    "match": "\\b(and|or|not)\\b"
                }
            ]
        },
        "types": {
            "patterns": [
                {
                    "name": "support.type.primitive.liva",
                    "match": "\\b(number|float|bool|char|string|bytes|i8|i16|i32|i64|i128|isize|u8|u16|u32|u64|u128|usize|f32|f64)\\b"
                },
                {
                    "name": "entity.name.type.liva",
                    "match": "\\b[A-Z][a-zA-Z0-9_]*\\b"
                }
            ]
        },
        "identifiers": {
            "patterns": [
                {
                    "name": "variable.language.private.liva",
                    "match": "__[a-zA-Z_][a-zA-Z0-9_]*\\b"
                },
                {
                    "name": "variable.language.protected.liva",
                    "match": "_[a-zA-Z_][a-zA-Z0-9_]*\\b"
                },
                {
                    "name": "variable.other.liva",
                    "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
                }
            ]
        },
        "operators": {
            "patterns": [
                {
                    "name": "keyword.operator.assignment.liva",
                    "match": "="
                },
                {
                    "name": "keyword.operator.arithmetic.liva",
                    "match": "(\\+|\\-|\\*|/|%)"
                },
                {
                    "name": "keyword.operator.comparison.liva",
                    "match": "(==|!=|<|>|<=|>=)"
                },
                {
                    "name": "keyword.operator.logical.liva",
                    "match": "(&&|\\|\\||!)"
                },
                {
                    "name": "keyword.operator.range.liva",
                    "match": "\\.\\."
                },
                {
                    "name": "keyword.operator.arrow.liva",
                    "match": "->"
                }
            ]
        },
        "punctuation": {
            "patterns": [
                {
                    "name": "punctuation.separator.liva",
                    "match": "(;|,|:)"
                },
                {
                    "name": "punctuation.section.liva",
                    "match": "(\\{|\\}|\\[|\\]|\\(|\\))"
                },
                {
                    "name": "keyword.operator.access.liva",
                    "match": "\\."
                },
                {
                    "name": "keyword.operator.optional.liva",
                    "match": "\\?"
                }
            ]
        }
    }
}
