{
    "$schema": "https://raw.githubusercontent.com/martinring/tmgram/main/tmgram.schema.json",
    "name": "Liva",
    "scopeName": "source.liva",
    "fileTypes": [".liva"],
    "patterns": [
        {
            "include": "#comments"
        },
        {
            "include": "#strings"
        },
        {
            "include": "#literals"
        },
        {
            "include": "#class-interface-declaration"
        },
        {
            "include": "#keywords"
        },
        {
            "include": "#types"
        },
        {
            "include": "#identifiers"
        },
        {
            "include": "#operators"
        },
        {
            "include": "#punctuation"
        }
    ],
    "repository": {
        "class-interface-declaration": {
            "patterns": [
                {
                    "comment": "Class or interface implementing other interfaces",
                    "match": "\\b([A-Z][a-zA-Z0-9_]*)\\s*:\\s*([A-Z][a-zA-Z0-9_,\\s]*)\\s*\\{",
                    "captures": {
                        "1": {
                            "name": "entity.name.type.class.liva"
                        },
                        "2": {
                            "name": "entity.name.type.interface.liva"
                        }
                    }
                },
                {
                    "comment": "Class or interface declaration",
                    "match": "\\b([A-Z][a-zA-Z0-9_]*)\\s*\\{",
                    "captures": {
                        "1": {
                            "name": "entity.name.type.class.liva"
                        }
                    }
                }
            ]
        },
        "comments": {
            "patterns": [
                {
                    "name": "comment.line.double-slash.liva",
                    "match": "//.*$"
                },
                {
                    "name": "comment.block.liva",
                    "begin": "/\\*",
                    "end": "\\*/"
                }
            ]
        },
        "strings": {
            "patterns": [
                {
                    "comment": "String template with interpolation $\"text {expr}\"",
                    "name": "string.template.liva",
                    "begin": "\\$\"",
                    "end": "\"",
                    "patterns": [
                        {
                            "name": "meta.embedded.expression.liva",
                            "begin": "\\{",
                            "end": "\\}",
                            "patterns": [
                                {
                                    "include": "#literals"
                                },
                                {
                                    "include": "#keywords"
                                },
                                {
                                    "include": "#identifiers"
                                },
                                {
                                    "include": "#operators"
                                }
                            ]
                        },
                        {
                            "name": "constant.character.escape.liva",
                            "match": "\\\\."
                        }
                    ]
                },
                {
                    "name": "string.quoted.double.liva",
                    "begin": "\"",
                    "end": "\"",
                    "patterns": [
                        {
                            "name": "constant.character.escape.liva",
                            "match": "\\\\."
                        }
                    ]
                },
                {
                    "name": "string.quoted.single.liva",
                    "begin": "'",
                    "end": "'",
                    "patterns": [
                        {
                            "name": "constant.character.escape.liva",
                            "match": "\\\\."
                        }
                    ]
                }
            ]
        },
        "literals": {
            "patterns": [
                {
                    "comment": "Floating point literals",
                    "name": "constant.numeric.float.liva",
                    "match": "\\b\\d[\\d_]*\\.\\d[\\d_]*([eE][+-]?\\d+)?\\b"
                },
                {
                    "comment": "Integer literals (decimal)",
                    "name": "constant.numeric.integer.decimal.liva",
                    "match": "\\b\\d[\\d_]*\\b"
                },
                {
                    "comment": "Hexadecimal literals",
                    "name": "constant.numeric.integer.hexadecimal.liva",
                    "match": "\\b0[xX][0-9a-fA-F_]+\\b"
                },
                {
                    "comment": "Binary literals",
                    "name": "constant.numeric.integer.binary.liva",
                    "match": "\\b0[bB][01_]+\\b"
                },
                {
                    "comment": "Boolean literals",
                    "name": "constant.language.boolean.liva",
                    "match": "\\b(true|false)\\b"
                },
                {
                    "comment": "Null/None literal",
                    "name": "constant.language.null.liva",
                    "match": "\\b(null|None)\\b"
                }
            ]
        },
        "keywords": {
            "patterns": [
                {
                    "comment": "Control flow keywords",
                    "name": "keyword.control.flow.liva",
                    "match": "\\b(if|else|while|for|in|switch|case|default|return|break|continue)\\b"
                },
                {
                    "comment": "Fail keyword - special error handling",
                    "name": "keyword.control.flow.fail.liva",
                    "match": "\\bfail\\b"
                },
                {
                    "comment": "Concurrency keywords - async/par/task/fire/await",
                    "name": "keyword.control.concurrency.liva",
                    "match": "\\b(async|await|par|task|fire)\\b"
                },
                {
                    "comment": "Parallel execution policies",
                    "name": "keyword.control.parallel.liva",
                    "match": "\\b(parvec|with|ordered|chunk|threads|simdWidth|prefetch|reduction|schedule|detect)\\b"
                },
                {
                    "comment": "Declaration keywords",
                    "name": "keyword.declaration.liva",
                    "match": "\\b(let|const|constructor|this)\\b"
                },
                {
                    "comment": "Module and import keywords",
                    "name": "keyword.other.liva",
                    "match": "\\b(import|use|rust|type|test|as|move)\\b"
                },
                {
                    "comment": "Execution mode keywords",
                    "name": "keyword.other.execution.liva",
                    "match": "\\b(seq|vec|auto|safe|fast|static|dynamic)\\b"
                },
                {
                    "comment": "Error handling keywords",
                    "name": "keyword.control.exception.liva",
                    "match": "\\b(throw|try|catch|Err|Ok)\\b"
                },
                {
                    "comment": "Logical operators - and/or/not",
                    "name": "keyword.operator.logical.liva",
                    "match": "\\b(and|or|not)\\b"
                }
            ]
        },
        "types": {
            "patterns": [
                {
                    "name": "support.type.primitive.liva",
                    "match": "\\b(number|float|bool|char|string|bytes|i8|i16|i32|i64|i128|isize|u8|u16|u32|u64|u128|usize|f32|f64)\\b"
                },
                {
                    "name": "entity.name.type.liva",
                    "match": "\\b[A-Z][a-zA-Z0-9_]*\\b"
                }
            ]
        },
        "identifiers": {
            "patterns": [
                {
                    "comment": "Function definitions with arrow syntax",
                    "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\(",
                    "captures": {
                        "1": {
                            "name": "entity.name.function.liva"
                        }
                    }
                },
                {
                    "comment": "Function calls",
                    "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*(?=\\()",
                    "captures": {
                        "1": {
                            "name": "entity.name.function.call.liva"
                        }
                    }
                },
                {
                    "comment": "Private identifiers (double underscore)",
                    "name": "variable.language.private.liva",
                    "match": "__[a-zA-Z_][a-zA-Z0-9_]*\\b"
                },
                {
                    "comment": "Protected/internal identifiers (single underscore)",
                    "name": "variable.language.protected.liva",
                    "match": "_[a-zA-Z_][a-zA-Z0-9_]*\\b"
                },
                {
                    "comment": "Regular identifiers",
                    "name": "variable.other.liva",
                    "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
                }
            ]
        },
        "operators": {
            "patterns": [
                {
                    "comment": "Arrow function operator",
                    "name": "keyword.operator.arrow.liva",
                    "match": "=>"
                },
                {
                    "comment": "Type annotation arrow",
                    "name": "keyword.operator.type.liva",
                    "match": "->"
                },
                {
                    "comment": "Range operator",
                    "name": "keyword.operator.range.liva",
                    "match": "\\.\\."
                },
                {
                    "comment": "Comparison operators",
                    "name": "keyword.operator.comparison.liva",
                    "match": "(==|!=|<=|>=|<|>)"
                },
                {
                    "comment": "Logical operators (symbols)",
                    "name": "keyword.operator.logical.liva",
                    "match": "(&&|\\|\\||!)"
                },
                {
                    "comment": "Arithmetic operators",
                    "name": "keyword.operator.arithmetic.liva",
                    "match": "(\\+|\\-|\\*|/|%)"
                },
                {
                    "comment": "Assignment operators",
                    "name": "keyword.operator.assignment.liva",
                    "match": "(=|\\+=|\\-=|\\*=|/=|%=)"
                },
                {
                    "comment": "Bitwise operators",
                    "name": "keyword.operator.bitwise.liva",
                    "match": "(&|\\||\\^|<<|>>|~)"
                }
            ]
        },
        "punctuation": {
            "patterns": [
                {
                    "name": "punctuation.separator.liva",
                    "match": "(;|,|:)"
                },
                {
                    "name": "punctuation.section.liva",
                    "match": "(\\{|\\}|\\[|\\]|\\(|\\))"
                },
                {
                    "name": "keyword.operator.access.liva",
                    "match": "\\."
                },
                {
                    "name": "keyword.operator.optional.liva",
                    "match": "\\?"
                }
            ]
        }
    }
}
