{
    "One-liner function (arrow)": {
        "prefix": "fn",
        "body": [
            "${1:function_name}(${2:parameters}) => ${3:expression}"
        ],
        "description": "Create a one-liner function with arrow syntax"
    },
    "Block function": {
        "prefix": "fnb",
        "body": [
            "${1:function_name}(${2:parameters}) {",
            "    ${3:// function body}",
            "    return ${4:value}",
            "}"
        ],
        "description": "Create a block function"
    },
    "Function with return type": {
        "prefix": "fnt",
        "body": [
            "${1:function_name}(${2:parameters}): ${3:ReturnType} {",
            "    ${4:// function body}",
            "    return ${5:value}",
            "}"
        ],
        "description": "Create a function with explicit return type"
    },
    "Typed one-liner function": {
        "prefix": "fn1",
        "body": [
            "${1:function_name}(${2:param}: ${3:Type}): ${4:ReturnType} => ${5:expression}"
        ],
        "description": "Create a typed one-liner function"
    },
    "Variable declaration": {
        "prefix": "let",
        "body": [
            "let ${1:variable_name}${2:: ${3:Type}} = ${4:value}"
        ],
        "description": "Create a mutable variable"
    },
    "Constant declaration": {
        "prefix": "const",
        "body": [
            "const ${1:CONSTANT_NAME}${2:: ${3:Type}} = ${4:value}"
        ],
        "description": "Create a constant"
    },
    "If statement": {
        "prefix": "if",
        "body": [
            "if ${1:condition} {",
            "    ${2:// true branch}",
            "}"
        ],
        "description": "Create an if statement"
    },
    "If-else statement": {
        "prefix": "ife",
        "body": [
            "if ${1:condition} {",
            "    ${2:// true branch}",
            "} else {",
            "    ${3:// false branch}",
            "}"
        ],
        "description": "Create an if-else statement"
    },
    "While loop": {
        "prefix": "while",
        "body": [
            "while ${1:condition} {",
            "    ${2:// loop body}",
            "}"
        ],
        "description": "Create a while loop"
    },
    "For loop": {
        "prefix": "for",
        "body": [
            "for ${1:item} in ${2:iterable} {",
            "    ${3:// loop body}",
            "}"
        ],
        "description": "Create a for loop"
    },
    "For seq loop": {
        "prefix": "forseq",
        "body": [
            "for seq ${1:item} in ${2:iterable} {",
            "    ${3:// sequential loop body}",
            "}"
        ],
        "description": "Create a sequential for loop"
    },
    "For loop with range": {
        "prefix": "forr",
        "body": [
            "for ${1:i} in ${2:0}..${3:10} {",
            "    ${4:// loop body}",
            "}"
        ],
        "description": "Create a for loop with range"
    },
    "For par loop with policies": {
        "prefix": "forparp",
        "body": [
            "for par ${1:item} in ${2:iterable} with chunk ${3:2} threads ${4:4} {",
            "    ${5:// parallel loop body}",
            "}"
        ],
        "description": "Create a parallel for loop with chunk and thread policies"
    },
    "For vec loop": {
        "prefix": "forvec",
        "body": [
            "for vec ${1:item} in ${2:iterable} {",
            "    ${3:// vector loop body}",
            "}"
        ],
        "description": "Create a vectorized for loop"
    },
    "For parvec loop": {
        "prefix": "forparvec",
        "body": [
            "for parvec ${1:item} in ${2:iterable} with simdWidth ${3:4} {",
            "    ${4:// parallel vectorized loop body}",
            "}"
        ],
        "description": "Create a parallel vectorized for loop with SIMD"
    },
    "For loop with options": {
        "prefix": "forwith",
        "body": [
            "for ${1|seq,par,vec,parvec|} ${2:item} in ${3:iterable} with ${4:chunk} ${5:2} {",
            "    ${6:// loop body with options}",
            "}"
        ],
        "description": "Create a for loop with policy options"
    },
    "Switch statement": {
        "prefix": "switch",
        "body": [
            "switch ${1:expression} {",
            "    case ${2:value}: ${3:// case body}",
            "    default: ${4:// default case}",
            "}"
        ],
        "description": "Create a switch statement"
    },
    "Async call": {
        "prefix": "async",
        "body": [
            "async ${1:functionCall}(${2:arguments})"
        ],
        "description": "Create an async function call"
    },
    "Par call": {
        "prefix": "par",
        "body": [
            "par ${1:functionCall}(${2:arguments})"
        ],
        "description": "Create a parallel function call"
    },
    "Task async": {
        "prefix": "taska",
        "body": [
            "task async ${1:functionCall}(${2:arguments})"
        ],
        "description": "Create an async task handle"
    },
    "Task par": {
        "prefix": "taskp",
        "body": [
            "task par ${1:functionCall}(${2:arguments})"
        ],
        "description": "Create a parallel task handle"
    },
    "Await task": {
        "prefix": "await",
        "body": [
            "await ${1:taskHandle}"
        ],
        "description": "Await a task handle"
    },
    "Fire async": {
        "prefix": "firea",
        "body": [
            "fire async ${1:functionCall}(${2:arguments})"
        ],
        "description": "Fire and forget async call"
    },
    "Fire par": {
        "prefix": "firep",
        "body": [
            "fire par ${1:functionCall}(${2:arguments})"
        ],
        "description": "Fire and forget parallel call"
    },
    "Try-catch": {
        "prefix": "try",
        "body": [
            "try {",
            "    ${1:// code that might throw}",
            "} catch ${2:error} {",
            "    ${3:// error handling}",
            "}"
        ],
        "description": "Create a try-catch block"
    },
    "Import statement": {
        "prefix": "import",
        "body": [
            "import \"${1:module_path}\""
        ],
        "description": "Create an import statement"
    },
    "Use statement": {
        "prefix": "use",
        "body": [
            "use ${1:module}::*"
        ],
        "description": "Create a use statement"
    },
    "Rust crate integration": {
        "prefix": "rust",
        "body": [
            "rust {",
            "    ${1:// Rust code}",
            "}"
        ],
        "description": "Embed Rust code"
    },
    "Type declaration": {
        "prefix": "type",
        "body": [
            "type ${1:TypeName} = ${2:definition}"
        ],
        "description": "Create a type alias"
    },
    "Test function": {
        "prefix": "test",
        "body": [
            "test ${1:test_name}() {",
            "    ${2:// test code}",
            "}"
        ],
        "description": "Create a test function"
    },
    "Class declaration": {
        "prefix": "class",
        "body": [
            "${1:ClassName} {",
            "    constructor(${2:parameters}) {",
            "        ${3:// initialization}",
            "    }",
            "    ",
            "    ${4:field}: ${5:Type}",
            "    ",
            "    ${6:method}() {",
            "        ${7:// method body}",
            "    }",
            "}"
        ],
        "description": "Create a class with constructor"
    },
    "Class with typed fields": {
        "prefix": "classt",
        "body": [
            "${1:ClassName} {",
            "    constructor(${2:name}: ${3:string}, ${4:age}: ${5:int}) {",
            "        this.${2:name} = ${2:name}",
            "        this.${4:age} = ${4:age}",
            "    }",
            "    ",
            "    ${2:name}: ${3:string}",
            "    ${4:age}: ${5:int}",
            "    ",
            "    ${6:method}() => ${7:expression}",
            "}"
        ],
        "description": "Create a class with typed fields and constructor"
    },
    "Interface declaration": {
        "prefix": "interface",
        "body": [
            "${1:InterfaceName} {",
            "    ${2:method}(${3:param}: ${4:Type}): ${5:ReturnType}",
            "    ${6:anotherMethod}(): ${7:ReturnType}",
            "}"
        ],
        "description": "Create an interface with method signatures"
    },
    "Simple interface": {
        "prefix": "iface",
        "body": [
            "${1:InterfaceName} {",
            "    ${2:method}(): ${3:ReturnType}",
            "}"
        ],
        "description": "Create a simple interface"
    },
    "Class implementing interface": {
        "prefix": "classi",
        "body": [
            "${1:ClassName} : ${2:InterfaceName} {",
            "    constructor(${3:parameters}) {",
            "        ${4:// initialization}",
            "    }",
            "    ",
            "    ${5:field}: ${6:Type}",
            "    ",
            "    // Interface implementation",
            "    ${7:method}(${8:param}: ${9:Type}): ${10:ReturnType} {",
            "        ${11:// implementation}",
            "    }",
            "}"
        ],
        "description": "Create a class implementing an interface"
    },
    "Class implementing multiple interfaces": {
        "prefix": "classim",
        "body": [
            "${1:ClassName} : ${2:Interface1}, ${3:Interface2} {",
            "    constructor(${4:parameters}) {",
            "        ${5:// initialization}",
            "    }",
            "    ",
            "    ${6:field}: ${7:Type}",
            "    ",
            "    // ${2:Interface1} implementation",
            "    ${8:method1}(): ${9:ReturnType} {",
            "        ${10:// implementation}",
            "    }",
            "    ",
            "    // ${3:Interface2} implementation",
            "    ${11:method2}(): ${12:ReturnType} {",
            "        ${13:// implementation}",
            "    }",
            "}"
        ],
        "description": "Create a class implementing multiple interfaces"
    },
    "Main function": {
        "prefix": "main",
        "body": [
            "main() {",
            "    ${1:// program entry point}",
            "}"
        ],
        "description": "Create a main function"
    },
    "Private member": {
        "prefix": "__",
        "body": [
            "__${1:member_name}"
        ],
        "description": "Create a private member"
    },
    "Protected member": {
        "prefix": "_",
        "body": [
            "_${1:member_name}"
        ],
        "description": "Create a protected member"
    },
    "If fail statement": {
        "prefix": "iff",
        "body": [
            "if ${1:condition} fail \"${2:message}\""
        ],
        "description": "Create an if fail statement"
    },
    "Ternary fail expression": {
        "prefix": "tf",
        "body": [
            "${1:condition} ? fail \"${2:message}\" : ${3:expr}"
        ],
        "description": "Create a ternary fail expression"
    },
    "Fallible let binding": {
        "prefix": "letf",
        "body": [
            "let ${1:value}, ${2:err} = ${3:expr}"
        ],
        "description": "Create a fallible let binding"
    },
    "Error binding with async": {
        "prefix": "leta",
        "body": [
            "let ${1:value}, ${2:err} = async ${3:functionCall}(${4:arguments})"
        ],
        "description": "Error binding with async call"
    },
    "Error binding with par": {
        "prefix": "letp",
        "body": [
            "let ${1:value}, ${2:err} = par ${3:functionCall}(${4:arguments})"
        ],
        "description": "Error binding with par call"
    },
    "Error check": {
        "prefix": "iferr",
        "body": [
            "if ${1:err} != \"\" {",
            "    ${2:// handle error}",
            "}"
        ],
        "description": "Check for error in error binding"
    },
    "Error check with message": {
        "prefix": "iferrp",
        "body": [
            "if ${1:err} != \"\" {",
            "    print(\\$\"Error: {${1:err}}\")",
            "    ${2:// additional handling}",
            "}"
        ],
        "description": "Check and print error message"
    },
    "Fail statement": {
        "prefix": "fail",
        "body": [
            "fail \"${1:message}\""
        ],
        "description": "Create a fail statement"
    },
    "String template": {
        "prefix": "st",
        "body": [
            "\\$\"${1:text} {${2:expression}}\""
        ],
        "description": "Create a string template with interpolation"
    },
    "Print statement": {
        "prefix": "pr",
        "body": [
            "print(${1:expression})"
        ],
        "description": "Print to console"
    },
    "Print string template": {
        "prefix": "prs",
        "body": [
            "print(\\$\"${1:text} {${2:expression}}\")"
        ],
        "description": "Print string template"
    },
    "Array literal": {
        "prefix": "arr",
        "body": [
            "[${1:element1}, ${2:element2}, ${3:element3}]"
        ],
        "description": "Create an array literal"
    },
    "Object literal": {
        "prefix": "obj",
        "body": [
            "{ ${1:key}: ${2:value}, ${3:key2}: ${4:value2} }"
        ],
        "description": "Create an object literal"
    },
    "Array of objects": {
        "prefix": "arrobj",
        "body": [
            "[",
            "    { ${1:key}: ${2:value} },",
            "    { ${1:key}: ${3:value} }",
            "]"
        ],
        "description": "Create an array of objects"
    },
    "If-else if-else": {
        "prefix": "ifelif",
        "body": [
            "if ${1:condition1} {",
            "    ${2:// branch 1}",
            "} else if ${3:condition2} {",
            "    ${4:// branch 2}",
            "} else {",
            "    ${5:// else branch}",
            "}"
        ],
        "description": "Create if-else if-else statement"
    },
    "Ternary expression": {
        "prefix": "tern",
        "body": [
            "${1:condition} ? ${2:trueValue} : ${3:falseValue}"
        ],
        "description": "Create ternary expression"
    },
    "Comment block": {
        "prefix": "cb",
        "body": [
            "// ============================================================================",
            "// ${1:SECTION TITLE}",
            "// ============================================================================",
            "${2}"
        ],
        "description": "Create a comment block section"
    },
    "TODO comment": {
        "prefix": "todo",
        "body": [
            "// TODO: ${1:description}"
        ],
        "description": "Create a TODO comment"
    },
    "FIXME comment": {
        "prefix": "fixme",
        "body": [
            "// FIXME: ${1:description}"
        ],
        "description": "Create a FIXME comment"
    },
    "Multi-async calls": {
        "prefix": "asyncm",
        "body": [
            "let ${1:task1} = task async ${2:function1}(${3:args1})",
            "let ${4:task2} = task async ${5:function2}(${6:args2})",
            "let ${7:task3} = task async ${8:function3}(${9:args3})",
            "",
            "let ${10:result1} = await ${1:task1}",
            "let ${11:result2} = await ${4:task2}",
            "let ${12:result3} = await ${7:task3}"
        ],
        "description": "Create multiple async task pattern"
    },
    "Parallel computation pattern": {
        "prefix": "parpat",
        "body": [
            "let ${1:task1} = task par ${2:compute1}(${3:args1})",
            "let ${4:task2} = task par ${5:compute2}(${6:args2})",
            "",
            "let ${7:result1} = await ${1:task1}",
            "let ${8:result2} = await ${4:task2}",
            "",
            "let ${9:combined} = ${7:result1} + ${8:result2}"
        ],
        "description": "Parallel computation pattern with task handles"
    }
}
